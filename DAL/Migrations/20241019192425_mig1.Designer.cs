// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Educational_Management_System.Migrations
{
    [DbContext(typeof(SysDbContext))]
    [Migration("20241019192425_mig1")]
    partial class mig1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("CourseSpecialityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CourseSpecialityId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Models.Enrollment", b =>
                {
                    b.Property<int>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnrollmentId"));

                    b.Property<int>("CoursePatchId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("EnrollmentDate")
                        .HasColumnType("date");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("EnrollmentId")
                        .HasName("PK_Enrollment_1");

                    b.HasIndex("CoursePatchId");

                    b.ToTable("Enrollment", (string)null);
                });

            modelBuilder.Entity("Models.Instructor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SpecialityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SpecialityId");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("Models.RealseCourse", b =>
                {
                    b.Property<int>("CoursePatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CoursePatchId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("CoursePatchId");

                    b.HasIndex("CourseId");

                    b.HasIndex("InstructorId");

                    b.ToTable("RealseCourse", (string)null);
                });

            modelBuilder.Entity("Models.Speciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id")
                        .HasName("PK_Speciality");

                    b.ToTable("Specialities");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("char(11)")
                        .IsFixedLength();

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Models.Course", b =>
                {
                    b.HasOne("Models.Speciality", "CourseSpeciality")
                        .WithMany("Courses")
                        .HasForeignKey("CourseSpecialityId")
                        .IsRequired()
                        .HasConstraintName("FK_Courses_Speciality");

                    b.Navigation("CourseSpeciality");
                });

            modelBuilder.Entity("Models.Enrollment", b =>
                {
                    b.HasOne("Models.RealseCourse", "CoursePatch")
                        .WithMany("Enrollments")
                        .HasForeignKey("CoursePatchId")
                        .IsRequired()
                        .HasConstraintName("FK_Enrollment_RealseCourse");

                    b.Navigation("CoursePatch");
                });

            modelBuilder.Entity("Models.Instructor", b =>
                {
                    b.HasOne("Models.Speciality", "Speciality")
                        .WithMany("Instructors")
                        .HasForeignKey("SpecialityId")
                        .IsRequired()
                        .HasConstraintName("FK_Instructors_Speciality");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("Models.RealseCourse", b =>
                {
                    b.HasOne("Models.Course", "Course")
                        .WithMany("RealseCourses")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_RealseCourse_Courses");

                    b.HasOne("Models.Instructor", "Instructor")
                        .WithMany("RealseCourses")
                        .HasForeignKey("InstructorId")
                        .IsRequired()
                        .HasConstraintName("FK_RealseCourse_Instructors");

                    b.Navigation("Course");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.HasOne("Models.Instructor", "UserNavigation")
                        .WithOne("User")
                        .HasForeignKey("Models.User", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK_User_Instructors");

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("Models.Course", b =>
                {
                    b.Navigation("RealseCourses");
                });

            modelBuilder.Entity("Models.Instructor", b =>
                {
                    b.Navigation("RealseCourses");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.RealseCourse", b =>
                {
                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("Models.Speciality", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Instructors");
                });
#pragma warning restore 612, 618
        }
    }
}
